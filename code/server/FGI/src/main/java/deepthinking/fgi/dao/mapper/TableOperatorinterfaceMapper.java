package deepthinking.fgi.dao.mapper;

import deepthinking.fgi.domain.TableOperatorinterface;
import deepthinking.fgi.domain.TableOperatorinterfaceCriteria;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectKey;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

public interface TableOperatorinterfaceMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table table_operatorinterface
     *
     * @mbg.generated
     */
    @SelectProvider(type=TableOperatorinterfaceSqlProvider.class, method="countByExample")
    long countByExample(TableOperatorinterfaceCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table table_operatorinterface
     *
     * @mbg.generated
     */
    @DeleteProvider(type=TableOperatorinterfaceSqlProvider.class, method="deleteByExample")
    int deleteByExample(TableOperatorinterfaceCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table table_operatorinterface
     *
     * @mbg.generated
     */
    @Delete({
        "delete from table_operatorinterface",
        "where ID = #{id,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table table_operatorinterface
     *
     * @mbg.generated
     */
    @Insert({
        "insert into table_operatorinterface (RoleID, AlgorithmID, ",
        "InterfaceName)",
        "values (#{roleid,jdbcType=INTEGER}, #{algorithmid,jdbcType=INTEGER}, ",
        "#{interfacename,jdbcType=VARCHAR})"
    })
    @SelectKey(statement="SELECT LAST_INSERT_ID()", keyProperty="id", before=false, resultType=Integer.class)
    int insert(TableOperatorinterface record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table table_operatorinterface
     *
     * @mbg.generated
     */
    @InsertProvider(type=TableOperatorinterfaceSqlProvider.class, method="insertSelective")
    @SelectKey(statement="SELECT LAST_INSERT_ID()", keyProperty="id", before=false, resultType=Integer.class)
    int insertSelective(TableOperatorinterface record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table table_operatorinterface
     *
     * @mbg.generated
     */
    @SelectProvider(type=TableOperatorinterfaceSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="ID", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="RoleID", property="roleid", jdbcType=JdbcType.INTEGER),
        @Result(column="AlgorithmID", property="algorithmid", jdbcType=JdbcType.INTEGER),
        @Result(column="InterfaceName", property="interfacename", jdbcType=JdbcType.VARCHAR)
    })
    List<TableOperatorinterface> selectByExample(TableOperatorinterfaceCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table table_operatorinterface
     *
     * @mbg.generated
     */
    @Select({
        "select",
        "ID, RoleID, AlgorithmID, InterfaceName",
        "from table_operatorinterface",
        "where ID = #{id,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="ID", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="RoleID", property="roleid", jdbcType=JdbcType.INTEGER),
        @Result(column="AlgorithmID", property="algorithmid", jdbcType=JdbcType.INTEGER),
        @Result(column="InterfaceName", property="interfacename", jdbcType=JdbcType.VARCHAR)
    })
    TableOperatorinterface selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table table_operatorinterface
     *
     * @mbg.generated
     */
    @UpdateProvider(type=TableOperatorinterfaceSqlProvider.class, method="updateByExampleSelective")
    int updateByExampleSelective(@Param("record") TableOperatorinterface record, @Param("example") TableOperatorinterfaceCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table table_operatorinterface
     *
     * @mbg.generated
     */
    @UpdateProvider(type=TableOperatorinterfaceSqlProvider.class, method="updateByExample")
    int updateByExample(@Param("record") TableOperatorinterface record, @Param("example") TableOperatorinterfaceCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table table_operatorinterface
     *
     * @mbg.generated
     */
    @UpdateProvider(type=TableOperatorinterfaceSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(TableOperatorinterface record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table table_operatorinterface
     *
     * @mbg.generated
     */
    @Update({
        "update table_operatorinterface",
        "set RoleID = #{roleid,jdbcType=INTEGER},",
          "AlgorithmID = #{algorithmid,jdbcType=INTEGER},",
          "InterfaceName = #{interfacename,jdbcType=VARCHAR}",
        "where ID = #{id,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(TableOperatorinterface record);
}