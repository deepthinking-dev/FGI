package deepthinking.fgi.dao.mapper;

import java.util.List;
import java.util.Map;

import deepthinking.fgi.domain.TableAlgorithm;
import deepthinking.fgi.domain.TableAlgorithmCriteria;
import deepthinking.fgi.domain.TableAlgorithmCriteria.Criteria;
import deepthinking.fgi.domain.TableAlgorithmCriteria.Criterion;
import org.apache.ibatis.jdbc.SQL;

public class TableAlgorithmSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table table_algorithm
     *
     * @mbg.generated
     */
    public String countByExample(TableAlgorithmCriteria example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("table_algorithm");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table table_algorithm
     *
     * @mbg.generated
     */
    public String deleteByExample(TableAlgorithmCriteria example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("table_algorithm");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table table_algorithm
     *
     * @mbg.generated
     */
    public String insertSelective(TableAlgorithm record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("table_algorithm");
        
        if (record.getAlgorithmname() != null) {
            sql.VALUES("AlgorithmName", "#{algorithmname,jdbcType=VARCHAR}");
        }
        
        if (record.getAlgorithmauthor() != null) {
            sql.VALUES("AlgorithmAuthor", "#{algorithmauthor,jdbcType=VARCHAR}");
        }
        
        if (record.getIspublic() != null) {
            sql.VALUES("IsPublic", "#{ispublic,jdbcType=DECIMAL}");
        }
        
        if (record.getAlgorithmtype() != null) {
            sql.VALUES("AlgorithmType", "#{algorithmtype,jdbcType=DECIMAL}");
        }
        
        if (record.getAlgorithmfun() != null) {
            sql.VALUES("AlgorithmFun", "#{algorithmfun,jdbcType=VARCHAR}");
        }
        
        if (record.getDes() != null) {
            sql.VALUES("Des", "#{des,jdbcType=VARCHAR}");
        }
        
        if (record.getUserid() != null) {
            sql.VALUES("UserID", "#{userid,jdbcType=INTEGER}");
        }
        
        if (record.getAlgorithmgroup() != null) {
            sql.VALUES("AlgorithmGroup", "#{algorithmgroup,jdbcType=VARCHAR}");
        }
        
        if (record.getRemark() != null) {
            sql.VALUES("Remark", "#{remark,jdbcType=VARCHAR}");
        }
        
        if (record.getStatus() != null) {
            sql.VALUES("Status", "#{status,jdbcType=VARCHAR}");
        }
        
        if (record.getRemark3() != null) {
            sql.VALUES("Remark3", "#{remark3,jdbcType=VARCHAR}");
        }
        
        if (record.getRemark4() != null) {
            sql.VALUES("Remark4", "#{remark4,jdbcType=VARCHAR}");
        }
        
        if (record.getRemark2() != null) {
            sql.VALUES("Remark2", "#{remark2,jdbcType=LONGVARCHAR}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table table_algorithm
     *
     * @mbg.generated
     */
    public String selectByExampleWithBLOBs(TableAlgorithmCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("ID");
        } else {
            sql.SELECT("ID");
        }
        sql.SELECT("AlgorithmName");
        sql.SELECT("AlgorithmAuthor");
        sql.SELECT("IsPublic");
        sql.SELECT("AlgorithmType");
        sql.SELECT("AlgorithmFun");
        sql.SELECT("Des");
        sql.SELECT("UserID");
        sql.SELECT("AlgorithmGroup");
        sql.SELECT("Remark");
        sql.SELECT("Status");
        sql.SELECT("Remark3");
        sql.SELECT("Remark4");
        sql.SELECT("Remark2");
        sql.FROM("table_algorithm");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table table_algorithm
     *
     * @mbg.generated
     */
    public String selectByExample(TableAlgorithmCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("ID");
        } else {
            sql.SELECT("ID");
        }
        sql.SELECT("AlgorithmName");
        sql.SELECT("AlgorithmAuthor");
        sql.SELECT("IsPublic");
        sql.SELECT("AlgorithmType");
        sql.SELECT("AlgorithmFun");
        sql.SELECT("Des");
        sql.SELECT("UserID");
        sql.SELECT("AlgorithmGroup");
        sql.SELECT("Remark");
        sql.SELECT("Status");
        sql.SELECT("Remark3");
        sql.SELECT("Remark4");
        sql.FROM("table_algorithm");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table table_algorithm
     *
     * @mbg.generated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        TableAlgorithm record = (TableAlgorithm) parameter.get("record");
        TableAlgorithmCriteria example = (TableAlgorithmCriteria) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("table_algorithm");
        
        if (record.getId() != null) {
            sql.SET("ID = #{record.id,jdbcType=INTEGER}");
        }
        
        if (record.getAlgorithmname() != null) {
            sql.SET("AlgorithmName = #{record.algorithmname,jdbcType=VARCHAR}");
        }
        
        if (record.getAlgorithmauthor() != null) {
            sql.SET("AlgorithmAuthor = #{record.algorithmauthor,jdbcType=VARCHAR}");
        }
        
        if (record.getIspublic() != null) {
            sql.SET("IsPublic = #{record.ispublic,jdbcType=DECIMAL}");
        }
        
        if (record.getAlgorithmtype() != null) {
            sql.SET("AlgorithmType = #{record.algorithmtype,jdbcType=DECIMAL}");
        }
        
        if (record.getAlgorithmfun() != null) {
            sql.SET("AlgorithmFun = #{record.algorithmfun,jdbcType=VARCHAR}");
        }
        
        if (record.getDes() != null) {
            sql.SET("Des = #{record.des,jdbcType=VARCHAR}");
        }
        
        if (record.getUserid() != null) {
            sql.SET("UserID = #{record.userid,jdbcType=INTEGER}");
        }
        
        if (record.getAlgorithmgroup() != null) {
            sql.SET("AlgorithmGroup = #{record.algorithmgroup,jdbcType=VARCHAR}");
        }
        
        if (record.getRemark() != null) {
            sql.SET("Remark = #{record.remark,jdbcType=VARCHAR}");
        }
        
        if (record.getStatus() != null) {
            sql.SET("Status = #{record.status,jdbcType=VARCHAR}");
        }
        
        if (record.getRemark3() != null) {
            sql.SET("Remark3 = #{record.remark3,jdbcType=VARCHAR}");
        }
        
        if (record.getRemark4() != null) {
            sql.SET("Remark4 = #{record.remark4,jdbcType=VARCHAR}");
        }
        
        if (record.getRemark2() != null) {
            sql.SET("Remark2 = #{record.remark2,jdbcType=LONGVARCHAR}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table table_algorithm
     *
     * @mbg.generated
     */
    public String updateByExampleWithBLOBs(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("table_algorithm");
        
        sql.SET("ID = #{record.id,jdbcType=INTEGER}");
        sql.SET("AlgorithmName = #{record.algorithmname,jdbcType=VARCHAR}");
        sql.SET("AlgorithmAuthor = #{record.algorithmauthor,jdbcType=VARCHAR}");
        sql.SET("IsPublic = #{record.ispublic,jdbcType=DECIMAL}");
        sql.SET("AlgorithmType = #{record.algorithmtype,jdbcType=DECIMAL}");
        sql.SET("AlgorithmFun = #{record.algorithmfun,jdbcType=VARCHAR}");
        sql.SET("Des = #{record.des,jdbcType=VARCHAR}");
        sql.SET("UserID = #{record.userid,jdbcType=INTEGER}");
        sql.SET("AlgorithmGroup = #{record.algorithmgroup,jdbcType=VARCHAR}");
        sql.SET("Remark = #{record.remark,jdbcType=VARCHAR}");
        sql.SET("Status = #{record.status,jdbcType=VARCHAR}");
        sql.SET("Remark3 = #{record.remark3,jdbcType=VARCHAR}");
        sql.SET("Remark4 = #{record.remark4,jdbcType=VARCHAR}");
        sql.SET("Remark2 = #{record.remark2,jdbcType=LONGVARCHAR}");
        
        TableAlgorithmCriteria example = (TableAlgorithmCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table table_algorithm
     *
     * @mbg.generated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("table_algorithm");
        
        sql.SET("ID = #{record.id,jdbcType=INTEGER}");
        sql.SET("AlgorithmName = #{record.algorithmname,jdbcType=VARCHAR}");
        sql.SET("AlgorithmAuthor = #{record.algorithmauthor,jdbcType=VARCHAR}");
        sql.SET("IsPublic = #{record.ispublic,jdbcType=DECIMAL}");
        sql.SET("AlgorithmType = #{record.algorithmtype,jdbcType=DECIMAL}");
        sql.SET("AlgorithmFun = #{record.algorithmfun,jdbcType=VARCHAR}");
        sql.SET("Des = #{record.des,jdbcType=VARCHAR}");
        sql.SET("UserID = #{record.userid,jdbcType=INTEGER}");
        sql.SET("AlgorithmGroup = #{record.algorithmgroup,jdbcType=VARCHAR}");
        sql.SET("Remark = #{record.remark,jdbcType=VARCHAR}");
        sql.SET("Status = #{record.status,jdbcType=VARCHAR}");
        sql.SET("Remark3 = #{record.remark3,jdbcType=VARCHAR}");
        sql.SET("Remark4 = #{record.remark4,jdbcType=VARCHAR}");
        
        TableAlgorithmCriteria example = (TableAlgorithmCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table table_algorithm
     *
     * @mbg.generated
     */
    public String updateByPrimaryKeySelective(TableAlgorithm record) {
        SQL sql = new SQL();
        sql.UPDATE("table_algorithm");
        
        if (record.getAlgorithmname() != null) {
            sql.SET("AlgorithmName = #{algorithmname,jdbcType=VARCHAR}");
        }
        
        if (record.getAlgorithmauthor() != null) {
            sql.SET("AlgorithmAuthor = #{algorithmauthor,jdbcType=VARCHAR}");
        }
        
        if (record.getIspublic() != null) {
            sql.SET("IsPublic = #{ispublic,jdbcType=DECIMAL}");
        }
        
        if (record.getAlgorithmtype() != null) {
            sql.SET("AlgorithmType = #{algorithmtype,jdbcType=DECIMAL}");
        }
        
        if (record.getAlgorithmfun() != null) {
            sql.SET("AlgorithmFun = #{algorithmfun,jdbcType=VARCHAR}");
        }
        
        if (record.getDes() != null) {
            sql.SET("Des = #{des,jdbcType=VARCHAR}");
        }
        
        if (record.getUserid() != null) {
            sql.SET("UserID = #{userid,jdbcType=INTEGER}");
        }
        
        if (record.getAlgorithmgroup() != null) {
            sql.SET("AlgorithmGroup = #{algorithmgroup,jdbcType=VARCHAR}");
        }
        
        if (record.getRemark() != null) {
            sql.SET("Remark = #{remark,jdbcType=VARCHAR}");
        }
        
        if (record.getStatus() != null) {
            sql.SET("Status = #{status,jdbcType=VARCHAR}");
        }
        
        if (record.getRemark3() != null) {
            sql.SET("Remark3 = #{remark3,jdbcType=VARCHAR}");
        }
        
        if (record.getRemark4() != null) {
            sql.SET("Remark4 = #{remark4,jdbcType=VARCHAR}");
        }
        
        if (record.getRemark2() != null) {
            sql.SET("Remark2 = #{remark2,jdbcType=LONGVARCHAR}");
        }
        
        sql.WHERE("ID = #{id,jdbcType=INTEGER}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table table_algorithm
     *
     * @mbg.generated
     */
    protected void applyWhere(SQL sql, TableAlgorithmCriteria example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}