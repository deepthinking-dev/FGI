package deepthinking.fgi.dao.mapper;

import deepthinking.fgi.domain.TableAlgorithmcondition;
import deepthinking.fgi.domain.TableAlgorithmconditionCriteria;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

public interface TableAlgorithmconditionMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table table_algorithmcondition
     *
     * @mbg.generated
     */
    @SelectProvider(type=TableAlgorithmconditionSqlProvider.class, method="countByExample")
    long countByExample(TableAlgorithmconditionCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table table_algorithmcondition
     *
     * @mbg.generated
     */
    @DeleteProvider(type=TableAlgorithmconditionSqlProvider.class, method="deleteByExample")
    int deleteByExample(TableAlgorithmconditionCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table table_algorithmcondition
     *
     * @mbg.generated
     */
    @Delete({
        "delete from table_algorithmcondition",
        "where ID = #{id,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table table_algorithmcondition
     *
     * @mbg.generated
     */
    @Insert({
        "insert into table_algorithmcondition (ID, AlgorithmRoleID, ",
        "FuncID, Behavior, ",
        "ValueSources, expression, ",
        "Remark)",
        "values (#{id,jdbcType=INTEGER}, #{algorithmroleid,jdbcType=INTEGER}, ",
        "#{funcid,jdbcType=INTEGER}, #{behavior,jdbcType=VARCHAR}, ",
        "#{valuesources,jdbcType=DECIMAL}, #{expression,jdbcType=VARCHAR}, ",
        "#{remark,jdbcType=VARCHAR})"
    })
    int insert(TableAlgorithmcondition record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table table_algorithmcondition
     *
     * @mbg.generated
     */
    @InsertProvider(type=TableAlgorithmconditionSqlProvider.class, method="insertSelective")
    int insertSelective(TableAlgorithmcondition record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table table_algorithmcondition
     *
     * @mbg.generated
     */
    @SelectProvider(type=TableAlgorithmconditionSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="ID", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="AlgorithmRoleID", property="algorithmroleid", jdbcType=JdbcType.INTEGER),
        @Result(column="FuncID", property="funcid", jdbcType=JdbcType.INTEGER),
        @Result(column="Behavior", property="behavior", jdbcType=JdbcType.VARCHAR),
        @Result(column="ValueSources", property="valuesources", jdbcType=JdbcType.DECIMAL),
        @Result(column="expression", property="expression", jdbcType=JdbcType.VARCHAR),
        @Result(column="Remark", property="remark", jdbcType=JdbcType.VARCHAR)
    })
    List<TableAlgorithmcondition> selectByExample(TableAlgorithmconditionCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table table_algorithmcondition
     *
     * @mbg.generated
     */
    @Select({
        "select",
        "ID, AlgorithmRoleID, FuncID, Behavior, ValueSources, expression, Remark",
        "from table_algorithmcondition",
        "where ID = #{id,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="ID", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="AlgorithmRoleID", property="algorithmroleid", jdbcType=JdbcType.INTEGER),
        @Result(column="FuncID", property="funcid", jdbcType=JdbcType.INTEGER),
        @Result(column="Behavior", property="behavior", jdbcType=JdbcType.VARCHAR),
        @Result(column="ValueSources", property="valuesources", jdbcType=JdbcType.DECIMAL),
        @Result(column="expression", property="expression", jdbcType=JdbcType.VARCHAR),
        @Result(column="Remark", property="remark", jdbcType=JdbcType.VARCHAR)
    })
    TableAlgorithmcondition selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table table_algorithmcondition
     *
     * @mbg.generated
     */
    @UpdateProvider(type=TableAlgorithmconditionSqlProvider.class, method="updateByExampleSelective")
    int updateByExampleSelective(@Param("record") TableAlgorithmcondition record, @Param("example") TableAlgorithmconditionCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table table_algorithmcondition
     *
     * @mbg.generated
     */
    @UpdateProvider(type=TableAlgorithmconditionSqlProvider.class, method="updateByExample")
    int updateByExample(@Param("record") TableAlgorithmcondition record, @Param("example") TableAlgorithmconditionCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table table_algorithmcondition
     *
     * @mbg.generated
     */
    @UpdateProvider(type=TableAlgorithmconditionSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(TableAlgorithmcondition record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table table_algorithmcondition
     *
     * @mbg.generated
     */
    @Update({
        "update table_algorithmcondition",
        "set AlgorithmRoleID = #{algorithmroleid,jdbcType=INTEGER},",
          "FuncID = #{funcid,jdbcType=INTEGER},",
          "Behavior = #{behavior,jdbcType=VARCHAR},",
          "ValueSources = #{valuesources,jdbcType=DECIMAL},",
          "expression = #{expression,jdbcType=VARCHAR},",
          "Remark = #{remark,jdbcType=VARCHAR}",
        "where ID = #{id,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(TableAlgorithmcondition record);
}