package deepthinking.fgi.dao.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

import deepthinking.fgi.domain.TDictionaryValue;
import deepthinking.fgi.domain.TDictionaryValueCriteria;
import deepthinking.fgi.model.frontend.DictionaryModel;

public interface TDictionaryValueMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_dictionary_value
     *
     * @mbg.generated
     */
    @SelectProvider(type=TDictionaryValueSqlProvider.class, method="countByExample")
    long countByExample(TDictionaryValueCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_dictionary_value
     *
     * @mbg.generated
     */
    @DeleteProvider(type=TDictionaryValueSqlProvider.class, method="deleteByExample")
    int deleteByExample(TDictionaryValueCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_dictionary_value
     *
     * @mbg.generated
     */
    @Delete({
        "delete from t_dictionary_value",
        "where dic_value_code = #{dicValueCode,jdbcType=VARCHAR}"
    })
    int deleteByPrimaryKey(String dicValueCode);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_dictionary_value
     *
     * @mbg.generated
     */
    @Insert({
        "insert into t_dictionary_value (dic_value_code, dic_code, ",
        "dic_value_name, dic_value_comment)",
        "values (#{dicValueCode,jdbcType=VARCHAR}, #{dicCode,jdbcType=INTEGER}, ",
        "#{dicValueName,jdbcType=VARCHAR}, #{dicValueComment,jdbcType=VARCHAR})"
    })
    int insert(TDictionaryValue record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_dictionary_value
     *
     * @mbg.generated
     */
    @InsertProvider(type=TDictionaryValueSqlProvider.class, method="insertSelective")
    int insertSelective(TDictionaryValue record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_dictionary_value
     *
     * @mbg.generated
     */
    @SelectProvider(type=TDictionaryValueSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="dic_value_code", property="dicValueCode", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="dic_code", property="dicCode", jdbcType=JdbcType.INTEGER),
        @Result(column="dic_value_name", property="dicValueName", jdbcType=JdbcType.VARCHAR),
        @Result(column="dic_value_comment", property="dicValueComment", jdbcType=JdbcType.VARCHAR)
    })
    List<TDictionaryValue> selectByExample(TDictionaryValueCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_dictionary_value
     *
     * @mbg.generated
     */
    @Select({
        "select",
        "dic_value_code, dic_code, dic_value_name, dic_value_comment",
        "from t_dictionary_value",
        "where dic_value_code = #{dicValueCode,jdbcType=VARCHAR}"
    })
    @Results({
        @Result(column="dic_value_code", property="dicValueCode", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="dic_code", property="dicCode", jdbcType=JdbcType.INTEGER),
        @Result(column="dic_value_name", property="dicValueName", jdbcType=JdbcType.VARCHAR),
        @Result(column="dic_value_comment", property="dicValueComment", jdbcType=JdbcType.VARCHAR)
    })
    TDictionaryValue selectByPrimaryKey(String dicValueCode);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_dictionary_value
     *
     * @mbg.generated
     */
    @UpdateProvider(type=TDictionaryValueSqlProvider.class, method="updateByExampleSelective")
    int updateByExampleSelective(@Param("record") TDictionaryValue record, @Param("example") TDictionaryValueCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_dictionary_value
     *
     * @mbg.generated
     */
    @UpdateProvider(type=TDictionaryValueSqlProvider.class, method="updateByExample")
    int updateByExample(@Param("record") TDictionaryValue record, @Param("example") TDictionaryValueCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_dictionary_value
     *
     * @mbg.generated
     */
    @UpdateProvider(type=TDictionaryValueSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(TDictionaryValue record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_dictionary_value
     *
     * @mbg.generated
     */
    @Update({
        "update t_dictionary_value",
        "set dic_code = #{dicCode,jdbcType=INTEGER},",
          "dic_value_name = #{dicValueName,jdbcType=VARCHAR},",
          "dic_value_comment = #{dicValueComment,jdbcType=VARCHAR}",
        "where dic_value_code = #{dicValueCode,jdbcType=VARCHAR}"
    })
    int updateByPrimaryKey(TDictionaryValue record);
    
    
    /**
     * 获取所有字典数据
     */
    @Select({
        "select",
        "t2.dic_code, t2.dic_name, t1.dic_value_code, t1.dic_value_name",
        "from t_dictionary_value t1,t_dictionary t2",
        "where t2.dic_code=t1.dic_code"
    })
    @Results({
        @Result(column="dic_value_code", property="dicValueCode", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="dic_code", property="dicCode", jdbcType=JdbcType.INTEGER),
        @Result(column="dic_value_name", property="dicValueName", jdbcType=JdbcType.VARCHAR),
        @Result(column="dic_name", property="dicName", jdbcType=JdbcType.VARCHAR),
        @Result(column="dic_value_comment", property="dicValueComment", jdbcType=JdbcType.VARCHAR)
    })
    List<DictionaryModel> selectAllDics();
    
    /**
     * 获取所有字典数据--设备类型
     */
    @Select({
        "select",
        "t1.dic_value_code, t1.dic_value_name, t1.dic_value_comment,t1.dic_code",
        "from t_dictionary_value t1,t_dictionary t2",
        "where t1.dic_code = t2.dic_code AND t2.dic_name='设备类型'"
    })
    @Results({
        @Result(column="dic_value_code", property="dicValueCode", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="dic_value_name", property="dicValueName", jdbcType=JdbcType.VARCHAR),
        @Result(column="dic_value_comment", property="dicValueComment", jdbcType=JdbcType.VARCHAR),
        @Result(column="dic_code", property="dicCode", jdbcType=JdbcType.VARCHAR)
    })
    List<TDictionaryValue> selectAllDeviceTypes();
}