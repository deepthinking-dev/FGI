package deepthinking.fgi.dao.mapper;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.jdbc.SQL;

import deepthinking.fgi.domain.TWorkorders;
import deepthinking.fgi.domain.TWorkordersCriteria;
import deepthinking.fgi.domain.TWorkordersCriteria.Criteria;
import deepthinking.fgi.domain.TWorkordersCriteria.Criterion;

public class TWorkordersSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_workorders
     *
     * @mbg.generated
     */
    public String countByExample(TWorkordersCriteria example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("t_workorders");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_workorders
     *
     * @mbg.generated
     */
    public String deleteByExample(TWorkordersCriteria example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("t_workorders");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_workorders
     *
     * @mbg.generated
     */
    public String insertSelective(TWorkorders record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("t_workorders");
        
        if (record.getOrderCode() != null) {
            sql.VALUES("order_code", "#{orderCode,jdbcType=INTEGER}");
        }
        
        if (record.getOrganizationCode() != null) {
            sql.VALUES("organization_code", "#{organizationCode,jdbcType=INTEGER}");
        }
        
        if (record.getInspectorCode() != null) {
            sql.VALUES("inspector_code", "#{inspectorCode,jdbcType=INTEGER}");
        }
        
        if (record.getInstrumentCode() != null) {
            sql.VALUES("instrument_code", "#{instrumentCode,jdbcType=VARCHAR}");
        }
        
        if (record.getDsdeviceCode() != null) {
            sql.VALUES("dsdevice_code", "#{dsdeviceCode,jdbcType=VARCHAR}");
        }
        
        if (record.getLineName() != null) {
            sql.VALUES("line_name", "#{lineName,jdbcType=VARCHAR}");
        }
        
        if (record.getWorkDate() != null) {
            sql.VALUES("work_date", "#{workDate,jdbcType=DATE}");
        }
        
        if (record.getInspectionOrderNo() != null) {
            sql.VALUES("inspection_order_no", "#{inspectionOrderNo,jdbcType=VARCHAR}");
        }
        
        if (record.getDirection() != null) {
            sql.VALUES("direction", "#{direction,jdbcType=VARCHAR}");
        }
        
        if (record.getInspectionPointName() != null) {
            sql.VALUES("inspection_point_name", "#{inspectionPointName,jdbcType=VARCHAR}");
        }
        
        if (record.getOrderStatus() != null) {
            sql.VALUES("order_status", "#{orderStatus,jdbcType=VARCHAR}");
        }
        
        if (record.getDataConsistency() != null) {
            sql.VALUES("data_consistency", "#{dataConsistency,jdbcType=INTEGER}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_workorders
     *
     * @mbg.generated
     */
    public String selectByExample(TWorkordersCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("order_code");
        } else {
            sql.SELECT("order_code");
        }
        sql.SELECT("organization_code");
        sql.SELECT("inspector_code");
        sql.SELECT("instrument_code");
        sql.SELECT("dsdevice_code");
        sql.SELECT("line_name");
        sql.SELECT("work_date");
        sql.SELECT("inspection_order_no");
        sql.SELECT("direction");
        sql.SELECT("inspection_point_name");
        sql.SELECT("order_status");
        sql.SELECT("data_consistency");
        sql.FROM("t_workorders");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    public String selectAllWorkOrders(HashMap<String,String> queryParams){
        SQL sql = new SQL();

        sql.SELECT("t1.order_code");
        sql.SELECT("t1.organization_code");
        sql.SELECT("t5.orgnization_name");
        sql.SELECT("t1.inspector_code");
        sql.SELECT("t4.staff_number");
        sql.SELECT("t4.staff_name");
        sql.SELECT("t1.instrument_code");
        sql.SELECT("t2.instrument_model");
        sql.SELECT("t1.dsdevice_code");
        sql.SELECT("t3.dsdevice_serial_no");
        sql.SELECT("t1.line_name");
        sql.SELECT("t1.work_date");
        sql.SELECT("t1.inspection_order_no");
        sql.SELECT("t1.direction");
        sql.SELECT("t1.inspection_point_name");
        sql.SELECT("t1.order_status");
        sql.SELECT("t1.data_consistency");
        sql.SELECT("t1.data_url");
        sql.FROM("t_workorders t1,t_instrument t2,t_datashield_device t3,t_staff t4,t_orgnization t5");
        
        StringBuilder sb = new StringBuilder();
        
        sb.append(" 1=1");
        
        if(null!=queryParams){
        	String inspectorName = queryParams.get("inspectorName");
            if(null!=inspectorName){
            	sb.append(" and t4.staff_name like '%");
            	sb.append(inspectorName);
            	sb.append("%'");
            }
        	String orgnizationName = queryParams.get("orgnizationName");
            if(null!=orgnizationName){
            	sb.append(" and t5.orgnization_name like '%");
            	sb.append(orgnizationName);
            	sb.append("%'");
            }
        	String orderStatus = queryParams.get("orderStatus");
            if(null!=orderStatus){
            	// 提取多种状态查询条件
            	String orderStatusStr = new String(orderStatus.toString());
            	String[] orderStatusArray = orderStatusStr.split("@");
            	if(orderStatusArray.length>0){
                	sb.append(" and t1.order_status in (");
                	for(int i = 0;i<orderStatusArray.length;i++){
                		sb.append("'");
                		sb.append(orderStatusArray[i]);
                		sb.append("'");
                		if(i==orderStatusArray.length-1) continue;
                		sb.append(",");
                	}
                	
                	sb.append(") ");
            	}

            }
            
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        	Object startWorkDate = queryParams.get("startWorkDate");
            if(null!=startWorkDate){
            	sb.append(" and t1.work_date >= '");
            	sb.append(sdf.format((Date)startWorkDate));
            	sb.append("'");
            }
            Object endWorkDate = queryParams.get("endWorkDate");
            if(null!=endWorkDate){
            	sb.append(" and t1.work_date <= '");
            	sb.append(sdf.format((Date)endWorkDate));
            	sb.append("'");
            }
        }
        
        sb.append(" and t1.instrument_code =t2.instrument_code ");
        sb.append(" and t1.dsdevice_code =t3.dsdevice_code ");
        sb.append(" and t1.inspector_code =t4.staff_code ");
        sb.append(" and t1.organization_code =t5.orgnization_code ");
        
        sql.WHERE(sb.toString());
        sql.ORDER_BY("t1.work_date DESC");
 
        
        return sql.toString();
    }
    
    
    public String selectByNonPrimaryKey(HashMap<String,Object> queryParams) throws ParseException{
        SQL sql = new SQL();

        sql.SELECT("order_code");
        sql.SELECT("organization_code");
        sql.SELECT("inspector_code");
        sql.SELECT("instrument_code");
        sql.SELECT("dsdevice_code");
        sql.SELECT("line_name");
        sql.SELECT("work_date");
        sql.SELECT("inspection_order_no");
        sql.SELECT("direction");
        sql.SELECT("inspection_point_name");
        sql.SELECT("order_status");
        sql.SELECT("data_consistency");
        sql.SELECT("data_url");
        sql.FROM("t_workorders");
        
        StringBuilder sb = new StringBuilder();
        
        sb.append(" 1=1");
        
        // 这部分后续要添加针对不同数据类型的支持
        if(null!=queryParams){
        	for(String key:queryParams.keySet()){
                if(null!=key && queryParams.get(key) instanceof String){
                	sb.append(" and ");
                	sb.append(key);
                	sb.append("= '");
                	sb.append(queryParams.get(key));
                	sb.append("'");
                }else if(null!=key && queryParams.get(key) instanceof Date){
                	sb.append(" and ");
                	sb.append(key);
                	sb.append("= '");
                	Date dateObj = (Date)queryParams.get(key);
                	//Date dateStr=new SimpleDateFormat("YYYY-MM-DD",Locale.CHINA).parse((String)dateObj);
                	sb.append(new SimpleDateFormat("yyyy-MM-dd").format(dateObj));
                	sb.append("'");
                }else if(null!=key && queryParams.get(key) instanceof Integer){
                	sb.append(" and ");
                	sb.append(key);
                	sb.append("= ");
                	sb.append(queryParams.get(key));
                }
                
        	}
        }

        sql.WHERE(sb.toString());
        sql.ORDER_BY("order_code");
 
        
        return sql.toString();
    }
  
    
    public String selectWorkOrderByInspectorCode(HashMap<String,Object> queryParams){
        SQL sql = new SQL();

        sql.SELECT("t1.order_code");
        sql.SELECT("t1.organization_code");
        sql.SELECT("t5.orgnization_name");
        sql.SELECT("t1.inspector_code");
        sql.SELECT("t4.staff_name");
        sql.SELECT("t1.instrument_code");
        sql.SELECT("t1.dsdevice_code");
        sql.SELECT("t1.line_name");
        sql.SELECT("t1.work_date");
        sql.SELECT("t1.inspection_order_no");
        sql.SELECT("t1.direction");
        sql.SELECT("t1.inspection_point_name");
        sql.SELECT("t1.order_status");
        sql.SELECT("t1.data_consistency");
        sql.SELECT("t1.data_url");
        sql.FROM("t_workorders t1,t_staff t4,t_orgnization t5");
        
        StringBuilder sb = new StringBuilder();
        
        sb.append(" 1=1");
        
        // 这部分后续要添加针对不同数据类型的支持
        if(null!=queryParams){
        	for(String key:queryParams.keySet()){
                if(null!=key && queryParams.get(key) instanceof String){
                	sb.append(" and t1.");
                	sb.append(key);
                	sb.append("= '");
                	sb.append(queryParams.get(key));
                	sb.append("'");
                }
        	}
        }

        sb.append(" and t1.inspector_code =t4.staff_code ");
        sb.append(" and t1.organization_code =t5.orgnization_code ");
        
        sql.WHERE(sb.toString());
        sql.ORDER_BY("t1.work_date DESC");
 
        
        return sql.toString();
    }
    
    
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_workorders
     *
     * @mbg.generated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        TWorkorders record = (TWorkorders) parameter.get("record");
        TWorkordersCriteria example = (TWorkordersCriteria) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("t_workorders");
        
        if (record.getOrderCode() != null) {
            sql.SET("order_code = #{record.orderCode,jdbcType=INTEGER}");
        }
        
        if (record.getOrganizationCode() != null) {
            sql.SET("organization_code = #{record.organizationCode,jdbcType=INTEGER}");
        }
        
        if (record.getInspectorCode() != null) {
            sql.SET("inspector_code = #{record.inspectorCode,jdbcType=INTEGER}");
        }
        
        if (record.getInstrumentCode() != null) {
            sql.SET("instrument_code = #{record.instrumentCode,jdbcType=VARCHAR}");
        }
        
        if (record.getDsdeviceCode() != null) {
            sql.SET("dsdevice_code = #{record.dsdeviceCode,jdbcType=VARCHAR}");
        }
        
        if (record.getLineName() != null) {
            sql.SET("line_name = #{record.lineName,jdbcType=VARCHAR}");
        }
        
        if (record.getWorkDate() != null) {
            sql.SET("work_date = #{record.workDate,jdbcType=DATE}");
        }
        
        if (record.getInspectionOrderNo() != null) {
            sql.SET("inspection_order_no = #{record.inspectionOrderNo,jdbcType=VARCHAR}");
        }
        
        if (record.getDirection() != null) {
            sql.SET("direction = #{record.direction,jdbcType=VARCHAR}");
        }
        
        if (record.getInspectionPointName() != null) {
            sql.SET("inspection_point_name = #{record.inspectionPointName,jdbcType=VARCHAR}");
        }
        
        if (record.getOrderStatus() != null) {
            sql.SET("order_status = #{record.orderStatus,jdbcType=VARCHAR}");
        }
        
        if (record.getDataConsistency() != null) {
            sql.SET("data_consistency = #{record.dataConsistency,jdbcType=INTEGER}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_workorders
     *
     * @mbg.generated
     */
    public String updateByNonPrimarykeySelective(Map<String, Object> parameter) {
        TWorkorders record = (TWorkorders) parameter.get("record");
        String inspectionOrderNo= parameter.get("parameter").toString();
        
        SQL sql = new SQL();
        sql.UPDATE("t_workorders");
        
        if (record.getOrderCode() != null) {
            sql.SET("order_code = #{record.orderCode,jdbcType=INTEGER}");
        }
        
        if (record.getOrganizationCode() != null) {
            sql.SET("organization_code = #{record.organizationCode,jdbcType=INTEGER}");
        }
        
        if (record.getInspectorCode() != null) {
            sql.SET("inspector_code = #{record.inspectorCode,jdbcType=INTEGER}");
        }
        
        if (record.getInstrumentCode() != null) {
            sql.SET("instrument_code = #{record.instrumentCode,jdbcType=VARCHAR}");
        }
        
        if (record.getDsdeviceCode() != null) {
            sql.SET("dsdevice_code = #{record.dsdeviceCode,jdbcType=VARCHAR}");
        }
        
        if (record.getLineName() != null) {
            sql.SET("line_name = #{record.lineName,jdbcType=VARCHAR}");
        }
        
        if (record.getWorkDate() != null) {
            sql.SET("work_date = #{record.workDate,jdbcType=DATE}");
        }
        
        if (record.getInspectionOrderNo() != null) {
            sql.SET("inspection_order_no = #{record.inspectionOrderNo,jdbcType=VARCHAR}");
        }
        
        if (record.getDirection() != null) {
            sql.SET("direction = #{record.direction,jdbcType=VARCHAR}");
        }
        
        if (record.getInspectionPointName() != null) {
            sql.SET("inspection_point_name = #{record.inspectionPointName,jdbcType=VARCHAR}");
        }
        
        if (record.getOrderStatus() != null) {
            sql.SET("order_status = #{record.orderStatus,jdbcType=VARCHAR}");
        }
        
        if (record.getDataConsistency() != null) {
            sql.SET("data_consistency = #{record.dataConsistency,jdbcType=INTEGER}");
        }
        
        if (record.getDataUrl() != null) {
            sql.SET("data_url = #{record.dataUrl,jdbcType=VARCHAR}");
        }
        
        sql.WHERE("inspection_order_no = '"+inspectionOrderNo+"'");
        return sql.toString();
    }
    
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_workorders
     *
     * @mbg.generated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("t_workorders");
        
        sql.SET("order_code = #{record.orderCode,jdbcType=INTEGER}");
        sql.SET("organization_code = #{record.organizationCode,jdbcType=INTEGER}");
        sql.SET("inspector_code = #{record.inspectorCode,jdbcType=INTEGER}");
        sql.SET("instrument_code = #{record.instrumentCode,jdbcType=VARCHAR}");
        sql.SET("dsdevice_code = #{record.dsdeviceCode,jdbcType=VARCHAR}");
        sql.SET("line_name = #{record.lineName,jdbcType=VARCHAR}");
        sql.SET("work_date = #{record.workDate,jdbcType=DATE}");
        sql.SET("inspection_order_no = #{record.inspectionOrderNo,jdbcType=VARCHAR}");
        sql.SET("direction = #{record.direction,jdbcType=VARCHAR}");
        sql.SET("inspection_point_name = #{record.inspectionPointName,jdbcType=VARCHAR}");
        sql.SET("order_status = #{record.orderStatus,jdbcType=VARCHAR}");
        sql.SET("data_consistency = #{record.dataConsistency,jdbcType=INTEGER}");
        
        TWorkordersCriteria example = (TWorkordersCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_workorders
     *
     * @mbg.generated
     */
    public String updateByPrimaryKeySelective(TWorkorders record) {
        SQL sql = new SQL();
        sql.UPDATE("t_workorders");
        
        if (record.getOrganizationCode() != null) {
            sql.SET("organization_code = #{organizationCode,jdbcType=INTEGER}");
        }
        
        if (record.getInspectorCode() != null) {
            sql.SET("inspector_code = #{inspectorCode,jdbcType=INTEGER}");
        }
        
        if (record.getInstrumentCode() != null) {
            sql.SET("instrument_code = #{instrumentCode,jdbcType=VARCHAR}");
        }
        
        if (record.getDsdeviceCode() != null) {
            sql.SET("dsdevice_code = #{dsdeviceCode,jdbcType=VARCHAR}");
        }
        
        if (record.getLineName() != null) {
            sql.SET("line_name = #{lineName,jdbcType=VARCHAR}");
        }
        
        if (record.getWorkDate() != null) {
            sql.SET("work_date = #{workDate,jdbcType=DATE}");
        }
        
        if (record.getInspectionOrderNo() != null) {
            sql.SET("inspection_order_no = #{inspectionOrderNo,jdbcType=VARCHAR}");
        }
        
        if (record.getDirection() != null) {
            sql.SET("direction = #{direction,jdbcType=VARCHAR}");
        }
        
        if (record.getInspectionPointName() != null) {
            sql.SET("inspection_point_name = #{inspectionPointName,jdbcType=VARCHAR}");
        }
        
        if (record.getOrderStatus() != null) {
            sql.SET("order_status = #{orderStatus,jdbcType=VARCHAR}");
        }
        
        if (record.getDataConsistency() != null) {
            sql.SET("data_consistency = #{dataConsistency,jdbcType=INTEGER}");
        }
        if (record.getDataConsistency() != null) {
            sql.SET("data_url = #{dataUrl,jdbcType=INTEGER}");
        }
        
        sql.WHERE("order_code = #{orderCode,jdbcType=INTEGER}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_workorders
     *
     * @mbg.generated
     */
    protected void applyWhere(SQL sql, TWorkordersCriteria example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}