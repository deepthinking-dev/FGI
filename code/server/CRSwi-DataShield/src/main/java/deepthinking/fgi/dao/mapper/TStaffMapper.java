package deepthinking.fgi.dao.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

import deepthinking.fgi.domain.TStaff;
import deepthinking.fgi.domain.TStaffCriteria;
import deepthinking.fgi.dto.frontend.StaffQryCriteria;
import deepthinking.fgi.dto.frontend.TStaffDto;
import deepthinking.fgi.dto.frontend.VerfyLoginDto;

public interface TStaffMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_staff
     *
     * @mbg.generated
     */
    @SelectProvider(type=TStaffSqlProvider.class, method="countByExample")
    long countByExample(TStaffCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_staff
     *
     * @mbg.generated
     */
    @DeleteProvider(type=TStaffSqlProvider.class, method="deleteByExample")
    int deleteByExample(TStaffCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_staff
     *
     * @mbg.generated
     */
    @Delete({
        "delete from t_staff",
        "where staff_code = #{staffCode,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer staffCode);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_staff
     *
     * @mbg.generated
     */
    @Insert({
        "insert into t_staff (staff_code, organization_code, ",
        "staff_name, staff_number, ",
        "staff_role,staff_pwd)",
        "values (#{staffCode,jdbcType=INTEGER}, #{organizationCode,jdbcType=INTEGER}, ",
        "#{staffName,jdbcType=VARCHAR}, #{staffNumber,jdbcType=VARCHAR}, ",
        "#{staffRole,jdbcType=VARCHAR},#{staffPwd,jdbcType=VARCHAR})"
    })
    int insert(TStaff record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_staff
     *
     * @mbg.generated
     */
    @InsertProvider(type=TStaffSqlProvider.class, method="insertSelective")
    int insertSelective(TStaff record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_staff
     *
     * @mbg.generated
     */
    @SelectProvider(type=TStaffSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="staff_code", property="staffCode", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="organization_code", property="organizationCode", jdbcType=JdbcType.INTEGER),
        @Result(column="staff_name", property="staffName", jdbcType=JdbcType.VARCHAR),
        @Result(column="staff_number", property="staffNumber", jdbcType=JdbcType.VARCHAR),
        @Result(column="staff_role", property="staffRole", jdbcType=JdbcType.VARCHAR)
    })
    List<TStaff> selectByExample(TStaffCriteria example);

    @SelectProvider(type=TStaffSqlProvider.class, method="checkStaffNumber")
    @Results({
        @Result(column="staff_number", property="staffNumber", jdbcType=JdbcType.VARCHAR, id=true)
    })
    
    List<String> checkStaffNumber(Object queryParams);
    
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_staff
     *
     * @mbg.generated
     */
    @Select({
        "select",
        "staff_code, organization_code, staff_name, staff_number, staff_role",
        "from t_staff",
        "where staff_code = #{staffCode,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="staff_code", property="staffCode", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="organization_code", property="organizationCode", jdbcType=JdbcType.INTEGER),
        @Result(column="staff_name", property="staffName", jdbcType=JdbcType.VARCHAR),
        @Result(column="staff_number", property="staffNumber", jdbcType=JdbcType.VARCHAR),
        @Result(column="staff_role", property="staffRole", jdbcType=JdbcType.VARCHAR)
    })
    TStaff selectByPrimaryKey(Integer staffCode);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_staff
     *
     * @mbg.generated
     */
    @UpdateProvider(type=TStaffSqlProvider.class, method="updateByExampleSelective")
    int updateByExampleSelective(@Param("record") TStaff record, @Param("example") TStaffCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_staff
     *
     * @mbg.generated
     */
    @UpdateProvider(type=TStaffSqlProvider.class, method="updateByExample")
    int updateByExample(@Param("record") TStaff record, @Param("example") TStaffCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_staff
     *
     * @mbg.generated
     */
    @UpdateProvider(type=TStaffSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(TStaff record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_staff
     *
     * @mbg.generated
     */
    @Update({
        "update t_staff",
        "set organization_code = #{organizationCode,jdbcType=INTEGER},",
          "staff_name = #{staffName,jdbcType=VARCHAR},",
          "staff_number = #{staffNumber,jdbcType=VARCHAR},",
          "staff_role = #{staffRole,jdbcType=VARCHAR}",
        "where staff_code = #{staffCode,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(TStaff record);
    
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_staff
     *
     * @mbg.generated
     */
    @SelectProvider(type=TStaffSqlProvider.class, method="selectAllStaffs")
    @Results({
        @Result(column="staff_code", property="staffCode", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="organization_code", property="organizationCode", jdbcType=JdbcType.INTEGER),
        @Result(column="orgnization_name", property="orgnizationName", jdbcType=JdbcType.VARCHAR),
        @Result(column="staff_name", property="staffName", jdbcType=JdbcType.VARCHAR),
        @Result(column="staff_number", property="staffNumber", jdbcType=JdbcType.VARCHAR),
        @Result(column="staff_role", property="staffRole", jdbcType=JdbcType.VARCHAR),
        @Result(column="staff_pwd", property="staffPwd", jdbcType=JdbcType.VARCHAR)
    })
    
    List<TStaffDto> selectAllStaffs(StaffQryCriteria staffQryCriteria);
    
    
    @Select({
        "select",
        "t1.staff_code, t1.organization_code, t2.orgnization_name,t1.staff_name, t1.staff_number, t1.staff_role,t1.staff_pwd",
        "from t_staff t1,t_orgnization t2",
        "where t1.staff_number = #{staffName,jdbcType=VARCHAR} and t1.staff_pwd=#{staffNumber,jdbcType=VARCHAR}",
        " and t1.organization_code=t2.orgnization_code ",
        " UNION ",
        "select",
        "t1.staff_code, t1.organization_code, t1.organization_code AS orgnization_name,t1.staff_name, t1.staff_number, t1.staff_role,t1.staff_pwd",
        "from t_staff t1",
        "where t1.staff_number = #{staffName,jdbcType=VARCHAR} and t1.staff_pwd=#{staffNumber,jdbcType=VARCHAR}",
        " and t1.organization_code IS NULL"
    })
    @Results({
        @Result(column="staff_code", property="staffCode", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="organization_code", property="organizationCode", jdbcType=JdbcType.INTEGER),
        @Result(column="orgnization_name", property="orgnizationName", jdbcType=JdbcType.VARCHAR),
        @Result(column="staff_name", property="staffName", jdbcType=JdbcType.VARCHAR),
        @Result(column="staff_number", property="staffNumber", jdbcType=JdbcType.VARCHAR),
        @Result(column="staff_role", property="staffRole", jdbcType=JdbcType.VARCHAR),
        @Result(column="staff_pwd", property="staffPwd", jdbcType=JdbcType.VARCHAR)
    })
    
    List<TStaffDto> verfyLogin(VerfyLoginDto verfyLoginDto);
}