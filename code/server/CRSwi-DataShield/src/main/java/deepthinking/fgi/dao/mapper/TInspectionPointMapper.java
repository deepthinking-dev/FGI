package deepthinking.fgi.dao.mapper;

import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

import deepthinking.fgi.domain.TInspectionPoint;
import deepthinking.fgi.domain.TInspectionPointCriteria;

public interface TInspectionPointMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_inspection_point
     *
     * @mbg.generated
     */
    @SelectProvider(type=TInspectionPointSqlProvider.class, method="countByExample")
    long countByExample(TInspectionPointCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_inspection_point
     *
     * @mbg.generated
     */
    @DeleteProvider(type=TInspectionPointSqlProvider.class, method="deleteByExample")
    int deleteByExample(TInspectionPointCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_inspection_point
     *
     * @mbg.generated
     */
    @Delete({
        "delete from t_inspection_point",
        "where inspection_point_code = #{inspectionPointCode,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer inspectionPointCode);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_inspection_point
     *
     * @mbg.generated
     */
    @Insert({
        "insert into t_inspection_point (inspection_point_code, line_code, ",
        "direction, inspection_point_type_code, ",
        "inspection_point_name, mileage_no)",
        "values (#{inspectionPointCode,jdbcType=INTEGER}, #{lineCode,jdbcType=INTEGER}, ",
        "#{direction,jdbcType=VARCHAR}, #{inspectionPointTypeCode,jdbcType=VARCHAR}, ",
        "#{inspectionPointName,jdbcType=VARCHAR}, #{mileageNo,jdbcType=VARCHAR})"
    })
    int insert(TInspectionPoint record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_inspection_point
     *
     * @mbg.generated
     */
    @InsertProvider(type=TInspectionPointSqlProvider.class, method="insertSelective")
    int insertSelective(TInspectionPoint record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_inspection_point
     *
     * @mbg.generated
     */
    @SelectProvider(type=TInspectionPointSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="inspection_point_code", property="inspectionPointCode", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="line_code", property="lineCode", jdbcType=JdbcType.INTEGER),
        @Result(column="direction", property="direction", jdbcType=JdbcType.VARCHAR),
        @Result(column="inspection_point_type_code", property="inspectionPointTypeCode", jdbcType=JdbcType.VARCHAR),
        @Result(column="inspection_point_name", property="inspectionPointName", jdbcType=JdbcType.VARCHAR),
        @Result(column="mileage_no", property="mileageNo", jdbcType=JdbcType.VARCHAR)
    })
    List<TInspectionPoint> selectByExample(TInspectionPointCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_inspection_point
     *
     * @mbg.generated
     */
    @Select({
        "select",
        "inspection_point_code, line_code, direction, inspection_point_type_code, inspection_point_name, ",
        "mileage_no",
        "from t_inspection_point",
        "where inspection_point_code = #{inspectionPointCode,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="inspection_point_code", property="inspectionPointCode", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="line_code", property="lineCode", jdbcType=JdbcType.INTEGER),
        @Result(column="direction", property="direction", jdbcType=JdbcType.VARCHAR),
        @Result(column="inspection_point_type_code", property="inspectionPointTypeCode", jdbcType=JdbcType.VARCHAR),
        @Result(column="inspection_point_name", property="inspectionPointName", jdbcType=JdbcType.VARCHAR),
        @Result(column="mileage_no", property="mileageNo", jdbcType=JdbcType.VARCHAR)
    })
    TInspectionPoint selectByPrimaryKey(Integer inspectionPointCode);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_inspection_point
     *
     * @mbg.generated
     */
    @UpdateProvider(type=TInspectionPointSqlProvider.class, method="updateByExampleSelective")
    int updateByExampleSelective(@Param("record") TInspectionPoint record, @Param("example") TInspectionPointCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_inspection_point
     *
     * @mbg.generated
     */
    @UpdateProvider(type=TInspectionPointSqlProvider.class, method="updateByExample")
    int updateByExample(@Param("record") TInspectionPoint record, @Param("example") TInspectionPointCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_inspection_point
     *
     * @mbg.generated
     */
    @UpdateProvider(type=TInspectionPointSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(TInspectionPoint record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_inspection_point
     *
     * @mbg.generated
     */
    @Update({
        "update t_inspection_point",
        "set line_code = #{lineCode,jdbcType=INTEGER},",
          "direction = #{direction,jdbcType=VARCHAR},",
          "inspection_point_type_code = #{inspectionPointTypeCode,jdbcType=VARCHAR},",
          "inspection_point_name = #{inspectionPointName,jdbcType=VARCHAR},",
          "mileage_no = #{mileageNo,jdbcType=VARCHAR}",
        "where inspection_point_code = #{inspectionPointCode,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(TInspectionPoint record);
}