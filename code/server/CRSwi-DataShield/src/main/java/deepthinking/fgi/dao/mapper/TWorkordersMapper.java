package deepthinking.fgi.dao.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

import deepthinking.fgi.domain.TWorkorders;
import deepthinking.fgi.domain.TWorkordersCriteria;
import deepthinking.fgi.dto.frontend.WorkOrderQryCriteria;
import deepthinking.fgi.dto.frontend.WorkorderDto;

public interface TWorkordersMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_workorders
     *
     * @mbg.generated
     */
    @SelectProvider(type=TWorkordersSqlProvider.class, method="countByExample")
    long countByExample(TWorkordersCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_workorders
     *
     * @mbg.generated
     */
    @DeleteProvider(type=TWorkordersSqlProvider.class, method="deleteByExample")
    int deleteByExample(TWorkordersCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_workorders
     *
     * @mbg.generated
     */
    @Delete({
        "delete from t_workorders",
        "where order_code = #{orderCode,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer orderCode);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_workorders
     *
     * @mbg.generated
     */
    @Insert({
        "insert into t_workorders (order_code, organization_code, ",
        "inspector_code, instrument_code, ",
        "dsdevice_code, line_name, ",
        "work_date, inspection_order_no, ",
        "direction, inspection_point_name, ",
        "order_status, data_consistency)",
        "values (#{orderCode,jdbcType=INTEGER}, #{organizationCode,jdbcType=INTEGER}, ",
        "#{inspectorCode,jdbcType=INTEGER}, #{instrumentCode,jdbcType=VARCHAR}, ",
        "#{dsdeviceCode,jdbcType=VARCHAR}, #{lineName,jdbcType=VARCHAR}, ",
        "#{workDate,jdbcType=DATE}, #{inspectionOrderNo,jdbcType=VARCHAR}, ",
        "#{direction,jdbcType=VARCHAR}, #{inspectionPointName,jdbcType=VARCHAR}, ",
        "#{orderStatus,jdbcType=VARCHAR}, #{dataConsistency,jdbcType=INTEGER})"
    })
    int insert(TWorkorders record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_workorders
     *
     * @mbg.generated
     */
    @InsertProvider(type=TWorkordersSqlProvider.class, method="insertSelective")
    int insertSelective(TWorkorders record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_workorders
     *
     * @mbg.generated
     */
    @SelectProvider(type=TWorkordersSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="order_code", property="orderCode", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="organization_code", property="organizationCode", jdbcType=JdbcType.INTEGER),
        @Result(column="inspector_code", property="inspectorCode", jdbcType=JdbcType.INTEGER),
        @Result(column="instrument_code", property="instrumentCode", jdbcType=JdbcType.VARCHAR),
        @Result(column="dsdevice_code", property="dsdeviceCode", jdbcType=JdbcType.VARCHAR),
        @Result(column="line_name", property="lineName", jdbcType=JdbcType.VARCHAR),
        @Result(column="work_date", property="workDate", jdbcType=JdbcType.DATE),
        @Result(column="inspection_order_no", property="inspectionOrderNo", jdbcType=JdbcType.VARCHAR),
        @Result(column="direction", property="direction", jdbcType=JdbcType.VARCHAR),
        @Result(column="inspection_point_name", property="inspectionPointName", jdbcType=JdbcType.VARCHAR),
        @Result(column="order_status", property="orderStatus", jdbcType=JdbcType.VARCHAR),
        @Result(column="data_consistency", property="dataConsistency", jdbcType=JdbcType.INTEGER)
    })
    List<TWorkorders> selectByExample(TWorkordersCriteria example);

    
    @SelectProvider(type=TWorkordersSqlProvider.class, method="selectAllWorkOrders")
    @Results({
        @Result(column="order_code", property="orderCode", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="organization_code", property="orgnizationCode", jdbcType=JdbcType.INTEGER),
        @Result(column="orgnization_name", property="orgnizationName", jdbcType=JdbcType.VARCHAR),
        @Result(column="inspector_code", property="inspectorCode", jdbcType=JdbcType.INTEGER),
        @Result(column="staff_number", property="inspectorNumber", jdbcType=JdbcType.VARCHAR),
        @Result(column="staff_name", property="inspectorName", jdbcType=JdbcType.VARCHAR),
        @Result(column="instrument_code", property="instrumentCode", jdbcType=JdbcType.VARCHAR),
        @Result(column="instrument_model", property="instrumentModel", jdbcType=JdbcType.VARCHAR),
        @Result(column="dsdevice_code", property="dsdeviceCode", jdbcType=JdbcType.VARCHAR),
        @Result(column="dsdevice_serial_no", property="dsdeviceSerialNo", jdbcType=JdbcType.VARCHAR),
        @Result(column="line_name", property="lineName", jdbcType=JdbcType.VARCHAR),
        @Result(column="work_date", property="workDate", jdbcType=JdbcType.DATE),
        @Result(column="inspection_order_no", property="inspectionOrderNo", jdbcType=JdbcType.VARCHAR),
        @Result(column="direction", property="direction", jdbcType=JdbcType.VARCHAR),
        @Result(column="inspection_point_name", property="inspectionPointName", jdbcType=JdbcType.VARCHAR),
        @Result(column="order_status", property="orderStatus", jdbcType=JdbcType.VARCHAR),
        @Result(column="data_consistency", property="dataConsistency", jdbcType=JdbcType.INTEGER),
        @Result(column="data_url", property="dataUrl", jdbcType=JdbcType.VARCHAR)
    })
    List<WorkorderDto> selectAllWorkOrders(WorkOrderQryCriteria queryParams);

    
    @SelectProvider(type=TWorkordersSqlProvider.class, method="selectByNonPrimaryKey")
    @Results({
    	@Result(column="order_code", property="orderCode", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="organization_code", property="organizationCode", jdbcType=JdbcType.INTEGER),
        @Result(column="inspector_code", property="inspectorCode", jdbcType=JdbcType.INTEGER),
        @Result(column="instrument_code", property="instrumentCode", jdbcType=JdbcType.VARCHAR),
        @Result(column="dsdevice_code", property="dsdeviceCode", jdbcType=JdbcType.VARCHAR),
        @Result(column="line_name", property="lineName", jdbcType=JdbcType.VARCHAR),
        @Result(column="work_date", property="workDate", jdbcType=JdbcType.DATE),
        @Result(column="inspection_order_no", property="inspectionOrderNo", jdbcType=JdbcType.VARCHAR),
        @Result(column="direction", property="direction", jdbcType=JdbcType.VARCHAR),
        @Result(column="inspection_point_name", property="inspectionPointName", jdbcType=JdbcType.VARCHAR),
        @Result(column="order_status", property="orderStatus", jdbcType=JdbcType.VARCHAR),
        @Result(column="data_consistency", property="dataConsistency", jdbcType=JdbcType.INTEGER),
        @Result(column="data_url", property="dataUrl", jdbcType=JdbcType.VARCHAR)
    })
    List<TWorkorders> selectByNonPrimaryKey(Object queryCriteria);
    
    @SelectProvider(type=TWorkordersSqlProvider.class, method="selectWorkOrderByInspectorCode")
    @Results({
        @Result(column="order_code", property="orderCode", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="organization_code", property="orgnizationCode", jdbcType=JdbcType.INTEGER),
        @Result(column="orgnization_name", property="orgnizationName", jdbcType=JdbcType.VARCHAR),
        @Result(column="inspector_code", property="inspectorCode", jdbcType=JdbcType.INTEGER),
        @Result(column="staff_name", property="inspectorName", jdbcType=JdbcType.VARCHAR),
        @Result(column="instrument_code", property="instrumentCode", jdbcType=JdbcType.VARCHAR),
        @Result(column="instrument_model", property="instrumentModel", jdbcType=JdbcType.VARCHAR),
        @Result(column="dsdevice_code", property="dsdeviceCode", jdbcType=JdbcType.VARCHAR),
        @Result(column="dsdevice_serial_no", property="dsdeviceSerialNo", jdbcType=JdbcType.VARCHAR),
        @Result(column="line_name", property="lineName", jdbcType=JdbcType.VARCHAR),
        @Result(column="work_date", property="workDate", jdbcType=JdbcType.DATE),
        @Result(column="inspection_order_no", property="inspectionOrderNo", jdbcType=JdbcType.VARCHAR),
        @Result(column="direction", property="direction", jdbcType=JdbcType.VARCHAR),
        @Result(column="inspection_point_name", property="inspectionPointName", jdbcType=JdbcType.VARCHAR),
        @Result(column="order_status", property="orderStatus", jdbcType=JdbcType.VARCHAR),
        @Result(column="data_consistency", property="dataConsistency", jdbcType=JdbcType.INTEGER),
        @Result(column="data_url", property="dataUrl", jdbcType=JdbcType.VARCHAR)
    })
    List<WorkorderDto> selectWorkOrderByInspectorCode(Object queryCriteria);
    
    
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_workorders
     *
     * @mbg.generated
     */
    @Select({
        "select",
        "order_code, organization_code, inspector_code, instrument_code, dsdevice_code, ",
        "line_name, work_date, inspection_order_no, direction, inspection_point_name, ",
        "order_status, data_consistency, data_url",
        "from t_workorders",
        "where order_code = #{orderCode,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="order_code", property="orderCode", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="organization_code", property="organizationCode", jdbcType=JdbcType.INTEGER),
        @Result(column="inspector_code", property="inspectorCode", jdbcType=JdbcType.INTEGER),
        @Result(column="instrument_code", property="instrumentCode", jdbcType=JdbcType.VARCHAR),
        @Result(column="dsdevice_code", property="dsdeviceCode", jdbcType=JdbcType.VARCHAR),
        @Result(column="line_name", property="lineName", jdbcType=JdbcType.VARCHAR),
        @Result(column="work_date", property="workDate", jdbcType=JdbcType.DATE),
        @Result(column="inspection_order_no", property="inspectionOrderNo", jdbcType=JdbcType.VARCHAR),
        @Result(column="direction", property="direction", jdbcType=JdbcType.VARCHAR),
        @Result(column="inspection_point_name", property="inspectionPointName", jdbcType=JdbcType.VARCHAR),
        @Result(column="order_status", property="orderStatus", jdbcType=JdbcType.VARCHAR),
        @Result(column="data_consistency", property="dataConsistency", jdbcType=JdbcType.INTEGER),
        @Result(column="data_url", property="dataUrl", jdbcType=JdbcType.VARCHAR)
    })
    TWorkorders selectByPrimaryKey(Integer orderCode);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_workorders
     *
     * @mbg.generated
     */
    @UpdateProvider(type=TWorkordersSqlProvider.class, method="updateByExampleSelective")
    int updateByExampleSelective(@Param("record") TWorkorders record, @Param("example") TWorkordersCriteria example);

    @UpdateProvider(type=TWorkordersSqlProvider.class, method="updateByNonPrimarykeySelective")
    int updateByNonPrimarykeySelective(@Param("record")TWorkorders record, @Param("parameter")Object parameter);
    
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_workorders
     *
     * @mbg.generated
     */
    @UpdateProvider(type=TWorkordersSqlProvider.class, method="updateByExample")
    int updateByExample(@Param("record") TWorkorders record, @Param("example") TWorkordersCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_workorders
     *
     * @mbg.generated
     */
    @UpdateProvider(type=TWorkordersSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(TWorkorders record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_workorders
     *
     * @mbg.generated
     */
    @Update({
        "update t_workorders",
        "set organization_code = #{organizationCode,jdbcType=INTEGER},",
          "inspector_code = #{inspectorCode,jdbcType=INTEGER},",
          "instrument_code = #{instrumentCode,jdbcType=VARCHAR},",
          "dsdevice_code = #{dsdeviceCode,jdbcType=VARCHAR},",
          "line_name = #{lineName,jdbcType=VARCHAR},",
          "work_date = #{workDate,jdbcType=DATE},",
          "inspection_order_no = #{inspectionOrderNo,jdbcType=VARCHAR},",
          "direction = #{direction,jdbcType=VARCHAR},",
          "inspection_point_name = #{inspectionPointName,jdbcType=VARCHAR},",
          "order_status = #{orderStatus,jdbcType=VARCHAR},",
          "data_consistency = #{dataConsistency,jdbcType=INTEGER}",
        "where order_code = #{orderCode,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(TWorkorders record);
}